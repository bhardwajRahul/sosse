# Copyright 2025 Laurent Defert
#
#  This file is part of SOSSE.
#
# SOSSE is free software: you can redistribute it and/or modify it under the terms of the GNU Affero
# General Public License as published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# SOSSE is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even
# the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License along with SOSSE.
# If not, see <https://www.gnu.org/licenses/>.

# Generated by Django 3.2.19 on 2025-01-08 13:09
import os

from django.db import migrations

from sosse.conf import CONF_FILE

OPTS_UPDATE = (
    ("atom_cached_bin_passthrough", "atom_archive_bin_passthrough"),
    ("cache_follows_redirect", "archive_follows_redirects"),
)


def update_cache_conf(apps, schema_editor):
    try:
        if os.path.exists(CONF_FILE):
            print("exists")
            with open(CONF_FILE) as f:
                content = f.read()

            print(f"content size: {len(content)}")
            new_content = content

            for old_val, new_val in OPTS_UPDATE:
                print(f"replace {old_val} by {new_val}")
                new_content = new_content.replace(old_val, new_val)

            if new_content != content:
                print("write")
                with open(CONF_FILE, "w") as f:
                    f.write(new_content)
    except Exception:  # nosec B110
        pass


def reverse_cache_conf(apps, schema_editor):
    try:
        if os.path.exists(CONF_FILE):
            with open(CONF_FILE) as f:
                content = f.read()

            new_content = content

            for old_val, new_val in OPTS_UPDATE:
                new_content = new_content.replace(new_val, old_val)

            if new_content != content:
                with open(CONF_FILE, "w") as f:
                    f.write(new_content)
    except Exception:  # nosec B110
        pass


class Migration(migrations.Migration):
    dependencies = [
        ("se", "0013_sosse_1_11_0"),
    ]

    operations = [
        migrations.RunPython(update_cache_conf, reverse_cache_conf),
    ]
